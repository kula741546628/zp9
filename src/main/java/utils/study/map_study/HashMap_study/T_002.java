package utils.study.map_study.HashMap_study;


/**
 * @Author kula
 * @create 2021/10/3 下午8:45
 * 十进制与二进制转换，
 * 与运算，
 * 右移位
 */
public class T_002 {
    public static void main(String[] args) {
        /**
         * 十进制转换二进制
         * 10%2  0
         * 5%2   1
         * 2%2   0
         * 1%2   1
         * 10    1010
         * 10    0000 1010
         */
        // 往右移
//        test01();
        // 往左移
//        test02();
        /**
         * >>>（无符号右移） 与 >>（有符号右移） 的区别
         * 正数的时候无区别；高位都是补0
         * 负数的时候，>>高位是补1的
         */
        // 往右移
        test03();
        /**
         * ^ 异或运算，针对二进制，相同为0，不同为1
         * & 与运算， 针对二进制，有0为0，无0为1
         */
        test04();

        /**
         * hashmap1.8中扩容是高低位链表计算演示
         */
        test05();
    }

    private static void test05() {
        /**
         * 16的二进制为
         * 0001 0000
         *
         * 31的二进制为
         * 0001 1111
         * 32的二进制为
         * 0010 0000
         */
        for (int i = 0; i < 1000; i++) {
            System.out.println("第"+i+"值的结果为：" + (i&16));
        }
    }

    public static void test01(){
        /**
         * 十进制转换二进制
         * 10%2  0
         * 5%2   1
         * 2%2   0
         * 1%2   1
         * 10    1010
         * 10    0000 1010
         * >> 2   往右移两位
         * 0000 1010   转换8位
         *   0000 1010  高位补0，地位超出舍弃
         * 0000 0010 的二进制就为2
         */
        System.out.println(10 >> 2);
        System.out.println(8 >> 2);
    }

    public static void test02(){
        /**
         * 十进制转换二进制
         * 10%2  0
         * 5%2   1
         * 2%2   0
         * 1%2   1
         * 10    1010
         * 10    0000 1010
         * << 2   往左移两位
         * 0000 1010   转换8位
         * 00 1010  地位补0，
         * 0010 1000 的二进制就为40
         */
        System.out.println(10 << 2);
    }

    public static void test03(){
        /**
         * 十进制转换二进制
         * 10%2  0
         * 5%2   1
         * 2%2   0
         * 1%2   1
         * 10    1010
         * 10    0000 1010
         * >> 2   往右移两位
         * 0000 1010   转换8位
         *   0000 1010  高位补0，地位超出舍弃
         * 0000 0010 的二进制就为2
         */
        System.out.println(10 >>> 2);
    }

    public static void test04(){
        /**
         * 2的二进制为
         * 0010
         * 3的二进制为
         * 0011
         *
         * 异或运算^
         * 0010
         * 0011
         * 0001 转换为十进制就是1
         */
        System.out.println(2^3);
    }
}
